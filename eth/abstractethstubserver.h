/**
 * THIS FILE IS GENERATED BY jsonrpcstub, DO NOT CHANGE IT!!!!!
 */

#ifndef _AbstractEthStubServer_H_
#define _AbstractEthStubServer_H_

#include <jsonrpc/rpc.h>

class AbstractEthStubServer : public jsonrpc::AbstractServer<AbstractEthStubServer>
{
    public:
        AbstractEthStubServer(jsonrpc::AbstractServerConnector* conn) :
            jsonrpc::AbstractServer<AbstractEthStubServer>(conn)
        {
            this->bindAndAddMethod(new jsonrpc::Procedure("balanceAt", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "a",jsonrpc::JSON_STRING,"block",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::balanceAtI);
            this->bindAndAddMethod(new jsonrpc::Procedure("block", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "numberOrHash",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::blockI);
            this->bindAndAddMethod(new jsonrpc::Procedure("call", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "json",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::callI);
            this->bindAndAddMethod(new jsonrpc::Procedure("codeAt", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "a",jsonrpc::JSON_STRING,"block",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::codeAtI);
            this->bindAndAddMethod(new jsonrpc::Procedure("coinbase", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING,  NULL), &AbstractEthStubServer::coinbaseI);
            this->bindAndAddMethod(new jsonrpc::Procedure("countAt", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER, "a",jsonrpc::JSON_STRING,"block",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::countAtI);
            this->bindAndAddMethod(new jsonrpc::Procedure("defaultBlock", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER,  NULL), &AbstractEthStubServer::defaultBlockI);
            this->bindAndAddMethod(new jsonrpc::Procedure("fromAscii", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "s",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::fromAsciiI);
            this->bindAndAddMethod(new jsonrpc::Procedure("fromFixed", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "s",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::fromFixedI);
            this->bindAndAddMethod(new jsonrpc::Procedure("gasPrice", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING,  NULL), &AbstractEthStubServer::gasPriceI);
            this->bindAndAddMethod(new jsonrpc::Procedure("isListening", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_BOOLEAN,  NULL), &AbstractEthStubServer::isListeningI);
            this->bindAndAddMethod(new jsonrpc::Procedure("isMining", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_BOOLEAN,  NULL), &AbstractEthStubServer::isMiningI);
            this->bindAndAddMethod(new jsonrpc::Procedure("key", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING,  NULL), &AbstractEthStubServer::keyI);
            this->bindAndAddMethod(new jsonrpc::Procedure("keys", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_ARRAY,  NULL), &AbstractEthStubServer::keysI);
            this->bindAndAddMethod(new jsonrpc::Procedure("lll", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "s",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::lllI);
            this->bindAndAddMethod(new jsonrpc::Procedure("messages", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "json",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::messagesI);
            this->bindAndAddMethod(new jsonrpc::Procedure("number", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER,  NULL), &AbstractEthStubServer::numberI);
            this->bindAndAddMethod(new jsonrpc::Procedure("peerCount", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER,  NULL), &AbstractEthStubServer::peerCountI);
            this->bindAndAddMethod(new jsonrpc::Procedure("secretToAddress", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "s",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::secretToAddressI);
            this->bindAndAddMethod(new jsonrpc::Procedure("setListening", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "l",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::setListeningI);
            this->bindAndAddMethod(new jsonrpc::Procedure("setMining", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "l",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::setMiningI);
            this->bindAndAddMethod(new jsonrpc::Procedure("sha3", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "s",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::sha3I);
            this->bindAndAddMethod(new jsonrpc::Procedure("stateAt", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "a",jsonrpc::JSON_STRING,"block",jsonrpc::JSON_STRING,"p",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::stateAtI);
            this->bindAndAddMethod(new jsonrpc::Procedure("toAscii", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "s",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::toAsciiI);
            this->bindAndAddMethod(new jsonrpc::Procedure("toDecimal", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "s",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::toDecimalI);
            this->bindAndAddMethod(new jsonrpc::Procedure("toFixed", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "s",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::toFixedI);
            this->bindAndAddMethod(new jsonrpc::Procedure("transact", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "json",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::transactI);
            this->bindAndAddMethod(new jsonrpc::Procedure("transaction", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "i",jsonrpc::JSON_STRING,"numberOrHash",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::transactionI);
            this->bindAndAddMethod(new jsonrpc::Procedure("uncle", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "i",jsonrpc::JSON_STRING,"numberOrHash",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::uncleI);
            this->bindAndAddMethod(new jsonrpc::Procedure("watch", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "json",jsonrpc::JSON_STRING, NULL), &AbstractEthStubServer::watchI);

        }
        
        inline virtual void balanceAtI(const Json::Value& request, Json::Value& response) 
        {
            response = this->balanceAt(request["a"].asString(), request["block"].asString());
        }

        inline virtual void blockI(const Json::Value& request, Json::Value& response) 
        {
            response = this->block(request["numberOrHash"].asString());
        }

        inline virtual void callI(const Json::Value& request, Json::Value& response) 
        {
            response = this->call(request["json"].asString());
        }

        inline virtual void codeAtI(const Json::Value& request, Json::Value& response) 
        {
            response = this->codeAt(request["a"].asString(), request["block"].asString());
        }

        inline virtual void coinbaseI(const Json::Value& request, Json::Value& response) 
        {
            response = this->coinbase();
        }

        inline virtual void countAtI(const Json::Value& request, Json::Value& response) 
        {
            response = this->countAt(request["a"].asString(), request["block"].asString());
        }

        inline virtual void defaultBlockI(const Json::Value& request, Json::Value& response) 
        {
            response = this->defaultBlock();
        }

        inline virtual void fromAsciiI(const Json::Value& request, Json::Value& response) 
        {
            response = this->fromAscii(request["s"].asString());
        }

        inline virtual void fromFixedI(const Json::Value& request, Json::Value& response) 
        {
            response = this->fromFixed(request["s"].asString());
        }

        inline virtual void gasPriceI(const Json::Value& request, Json::Value& response) 
        {
            response = this->gasPrice();
        }

        inline virtual void isListeningI(const Json::Value& request, Json::Value& response) 
        {
            response = this->isListening();
        }

        inline virtual void isMiningI(const Json::Value& request, Json::Value& response) 
        {
            response = this->isMining();
        }

        inline virtual void keyI(const Json::Value& request, Json::Value& response) 
        {
            response = this->key();
        }

        inline virtual void keysI(const Json::Value& request, Json::Value& response) 
        {
            response = this->keys();
        }

        inline virtual void lllI(const Json::Value& request, Json::Value& response) 
        {
            response = this->lll(request["s"].asString());
        }

        inline virtual void messagesI(const Json::Value& request, Json::Value& response) 
        {
            response = this->messages(request["json"].asString());
        }

        inline virtual void numberI(const Json::Value& request, Json::Value& response) 
        {
            response = this->number();
        }

        inline virtual void peerCountI(const Json::Value& request, Json::Value& response) 
        {
            response = this->peerCount();
        }

        inline virtual void secretToAddressI(const Json::Value& request, Json::Value& response) 
        {
            response = this->secretToAddress(request["s"].asString());
        }

        inline virtual void setListeningI(const Json::Value& request, Json::Value& response) 
        {
            response = this->setListening(request["l"].asString());
        }

        inline virtual void setMiningI(const Json::Value& request, Json::Value& response) 
        {
            response = this->setMining(request["l"].asString());
        }

        inline virtual void sha3I(const Json::Value& request, Json::Value& response) 
        {
            response = this->sha3(request["s"].asString());
        }

        inline virtual void stateAtI(const Json::Value& request, Json::Value& response) 
        {
            response = this->stateAt(request["a"].asString(), request["block"].asString(), request["p"].asString());
        }

        inline virtual void toAsciiI(const Json::Value& request, Json::Value& response) 
        {
            response = this->toAscii(request["s"].asString());
        }

        inline virtual void toDecimalI(const Json::Value& request, Json::Value& response) 
        {
            response = this->toDecimal(request["s"].asString());
        }

        inline virtual void toFixedI(const Json::Value& request, Json::Value& response) 
        {
            response = this->toFixed(request["s"].asString());
        }

        inline virtual void transactI(const Json::Value& request, Json::Value& response) 
        {
            response = this->transact(request["json"].asString());
        }

        inline virtual void transactionI(const Json::Value& request, Json::Value& response) 
        {
            response = this->transaction(request["i"].asString(), request["numberOrHash"].asString());
        }

        inline virtual void uncleI(const Json::Value& request, Json::Value& response) 
        {
            response = this->uncle(request["i"].asString(), request["numberOrHash"].asString());
        }

        inline virtual void watchI(const Json::Value& request, Json::Value& response) 
        {
            response = this->watch(request["json"].asString());
        }


        virtual std::string balanceAt(const std::string& a, const std::string& block) = 0;
        virtual std::string block(const std::string& numberOrHash) = 0;
        virtual std::string call(const std::string& json) = 0;
        virtual std::string codeAt(const std::string& a, const std::string& block) = 0;
        virtual std::string coinbase() = 0;
        virtual int countAt(const std::string& a, const std::string& block) = 0;
        virtual int defaultBlock() = 0;
        virtual std::string fromAscii(const std::string& s) = 0;
        virtual std::string fromFixed(const std::string& s) = 0;
        virtual std::string gasPrice() = 0;
        virtual bool isListening() = 0;
        virtual bool isMining() = 0;
        virtual std::string key() = 0;
        virtual Json::Value keys() = 0;
        virtual std::string lll(const std::string& s) = 0;
        virtual std::string messages(const std::string& json) = 0;
        virtual int number() = 0;
        virtual int peerCount() = 0;
        virtual std::string secretToAddress(const std::string& s) = 0;
        virtual std::string setListening(const std::string& l) = 0;
        virtual std::string setMining(const std::string& l) = 0;
        virtual std::string sha3(const std::string& s) = 0;
        virtual std::string stateAt(const std::string& a, const std::string& block, const std::string& p) = 0;
        virtual std::string toAscii(const std::string& s) = 0;
        virtual std::string toDecimal(const std::string& s) = 0;
        virtual std::string toFixed(const std::string& s) = 0;
        virtual std::string transact(const std::string& json) = 0;
        virtual std::string transaction(const std::string& i, const std::string& numberOrHash) = 0;
        virtual std::string uncle(const std::string& i, const std::string& numberOrHash) = 0;
        virtual std::string watch(const std::string& json) = 0;

};
#endif //_AbstractEthStubServer_H_
